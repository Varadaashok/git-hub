git hub and git bash
commands-
git init - to intialize the git in local system
git status- to check the status of the action
git config --global user.name "ashokkumar"  -- to configure or update username
git config --global user.email "varadaashokkumar1996@gmail.com"   -- to configure or update mailid
git config --list  -- to show the configurations like user name and mail
git config --global --unset user.name  --- to remove username from git
git config --global --unset user.email  --- to remove user mail from git

git status - display the files in workspace and staging
git add <filename> -- move file from workspace to staging
git add . / git add * / git add -A  --- move multiple files from workspace to staging
git commit -m "lable name" -- move file from staging to local repo
git pull --rebase -- to update github changes in local machine
 
git log -- show all the commits done with author details and time
git show -- show the details of file and commit, time etc.,
git reset head <filename> -- move back file from staging to workspace
git reset --soft <cid n-1>

file delete
===========
rm filename


Open fresh git bash
git clone https://github.com/polarapu/Batch105.git
Open a file in Notepad and edit and push it
git log
q - end
git log -3 (with recent 3 logs)

TOKEN--

settings
developer settings
personal access tokens
select classic
give details select scopes
generate token
copy and paste in notepad
while signin select token and login






===============================
git clone https://github.com/polarapu/Batch105.git
ls
cd Batch105
touch prasad
ls
git status
git add .
git status
git commit -m "sample commit from prasad"
git push

remote: Permission to polarapu/Batch105.git denied to manasadevops1.
fatal: unable to access 'https://github.com/polarapu/Batch105.git/': The requested URL returned error: 403

git push

$ git push
To https://github.com/polarapu/Batch105.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/polarapu/Batch105.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

git pull --rebase
git push
git pull --rebase
git push

===================
mkdir dir1
ls
touch dir1/file1
git status
git add .
git commit -m "sample dir"
git push

mkdir dir2
ls
cd dir2
touch file1 file2
cd ..
git add .
git commit -m "sample dir2"
git push

====================
rm -rf dir2
git status
git add .
git commit -m "dir2 deleted"
git push

rm -rf dir1/file1
git status
git add .
git commit -m "sample file"
git push

=============================
git branch
git branch release1
git branch
git checkout release1
git checkout main

git branch -d release1  (to delete branch)

git merge branch-name 9to copy data from one branch to another branch)

touch, echo, cat, vi
====================
touch file1
touch file2 file3

echo
----
echo "hello all" > file4

cat
---
cat > file5
....
....
ctrl+d

cat file5

cat >> file5
....
....
ctrl+d

VI
===

vi file6
--------
esc i
.......
.......
.......
esc :w!
    :q!
or
esc :wq!

upload branch into git-hub
--------------------------
git push origin release1
or
git push git-hub-path release1

git branch -d release1  (local delete)
git push origin -d release1 (git-hub delete)


Alias
=====
git status
git config --global alias.s "status"
git s

git config --list
git config --global alias.cl "config --list"
git cl

git commit -m "sample-commit"
git config --global alias.cmt "commit -m "sample-commit""
git cmt

to remove alias:

git config --global --unset alias.s

.gitignore
===========
king1
king2
king3

touch king1 king2 king3 king4
git status
git add .
git cmt

logs
====
git log
git log -n
git log --oneline
git log --oneline -n
git log --author=Prasad
git log --author=Prasad -n
git log --author=Prasad --oneline
git log --author=Prasad --oneline -n

git log --since=yy-mm-dd
or
git log --after=yy-mm-dd

git log --until=yy-mm-dd
or
git log --before=yy-mm-dd

git log --since=yy-mm-dd --until=yy-mm-dd
or
git log --after=yy-mm-dd --before=yy-mm-dd

git log --since="yy-mm-dd 11:00" --until="yy-mm-dd 23:00"

git log --grep="label"
git log -- file file-name



merge conflicts
================


revert
======
git revert cid

reset
=====
git reset head file  (staging to workspace)

git reset --soft cid (local to statging)
git reset --mixed cid (local to workspace)

git reset --hard cid  (to delete commit and commit files)

amend
======
git commit --amend -m "label"

git stash
=========
git stash list
git stash save "stash1" (only modified files and staging files)
git stash list
git stash show stash@{0}
git stash show -p stash@{0}

POP, APPLY, DROP
----------------
POP = cut
----------
git stash pop
git stash pop stash@{x}

APPLY = COPY
------------
git stash apply
git stash apply stash@{x}

DROP = Delete
-------------
git stash drop
git stash drop stash@{x}

Tag
===
git tag
git tag tag1
git show tag1
git tag -d tag1

git tag tag1 cid
git push origin tag1
or
git push --tags (all tags upload)
git checkout tag1 (to checkout tag)
git push origin -d tag1 (to delete tag in git-hub)


git diff
=========
git diff file1 file2
git diff main release1

cherry-pick
===========
git cherry-pick cid

merge vs rebase
===============
git merge release1
git rebase release1

Fetch
=====
git pull = git fetch + git merge
